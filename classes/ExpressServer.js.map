{"version":3,"sources":["../src/resources/classes/ExpressServer.js"],"names":["ExpressServer","app","use","bodyParser","urlencoded","extended","json","disable","req","res","next","startTimestamp","Date","now","header","method","status","send","httpServer","http","Server","routersMap","name","pth","express","Router","routerName","routeData","staticsPath","path","static","toLowerCase","handler","httpPort","deferred","q","defer","listen","resolve","promise","startHTTPServer","then"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEaA,a,WAAAA,a;AAET,6BAAe;AAAA;;AACX,aAAKC,GAAL,GAAW,wBAAX;AACA,aAAKA,GAAL,CAASC,GAAT,CAAa,4BAAb;AACA,aAAKD,GAAL,CAASC,GAAT,CAAaC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAb;AACA,aAAKJ,GAAL,CAASC,GAAT,CAAaC,qBAAWG,IAAX,EAAb;AACA,aAAKL,GAAL,CAASC,GAAT,CAAa,6BAAb;AACA,aAAKD,GAAL,CAASM,OAAT,CAAiB,cAAjB;AACA,aAAKN,GAAL,CAASC,GAAT,CAAa,sBAAO,KAAP,CAAb;AACA,aAAKD,GAAL,CAASC,GAAT,CAAa,UAAUM,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACnCF,gBAAIG,cAAJ,GAAqBC,KAAKC,GAAL,EAArB;AACAJ,gBAAIK,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAL,gBAAIK,MAAJ,CAAW,8BAAX,EAA2C,6BAA3C;AACAL,gBAAIK,MAAJ,CAAW,8BAAX,EAA2C,+DAA3C;AACA,gBAAI,aAAaN,IAAIO,MAArB,EAA6BN,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB,EAA7B,KACKP;AACR,SAPD;AAQA,aAAKQ,UAAL,GAAkBC,eAAKC,MAAL,CAAY,KAAKnB,GAAjB,CAAlB;AACA,aAAKoB,UAAL,GAAkB,EAAlB;AACH;;;;kCAEUC,I,EAAMC,G,EAAK;AAClB,iBAAKF,UAAL,CAAgBC,IAAhB,IAAwBE,kBAAQC,MAAR,EAAxB;AACA,iBAAKxB,GAAL,CAASC,GAAT,CAAaqB,GAAb,EAAkB,KAAKF,UAAL,CAAgBC,IAAhB,CAAlB;AACH;;;iCAESI,U,EAAYC,S,EAAW;AAC7B;AACA,gBAAIA,UAAUC,WAAd,EAA2B;AACvB,qBAAKP,UAAL,CAAgBK,UAAhB,EAA4BxB,GAA5B,CACIyB,UAAUE,IADd,EACoBL,kBAAQM,MAAR,CAAeH,UAAUC,WAAzB,CADpB;AAGH;AACD;AALA,iBAMK;AACD,yBAAKP,UAAL,CAAgBK,UAAhB,EACIC,UAAUZ,MAAV,CAAiBgB,WAAjB,EADJ,EAEEJ,UAAUE,IAFZ,EAEkBF,UAAUK,OAF5B;AAGH;AACJ;;;wCAEgBC,Q,EAAU;AACvB,gBAAIC,WAAWC,YAAEC,KAAF,EAAf;AACA,iBAAKlB,UAAL,CAAgBmB,MAAhB,CAAuBJ,QAAvB,EAAiC,YAAM;AACnCC,yBAASI,OAAT;AACH,aAFD;AAGA,mBAAOJ,SAASK,OAAhB;AACH;;;8BAEMN,Q,EAAU;AACb,gBAAIC,WAAWC,YAAEC,KAAF,EAAf;AACA,iBAAKI,eAAL,CAAqBP,QAArB,EAA+BQ,IAA/B,CAAoC,YAAM;AACtCP,yBAASI,OAAT,CAAiB;AACbnB,0BAAMc;AADO,iBAAjB;AAGH,aAJD;AAKA,mBAAOC,SAASK,OAAhB;AACH","file":"ExpressServer.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport compression from 'compression';\nimport morgan from 'morgan';\nimport http from 'http';\nimport fs from 'fs';\nimport path from 'path';\nimport q from 'q';\n\nexport class ExpressServer {\n    \n    constructor () {\n        this.app = express();\n        this.app.use(compression());\n        this.app.use(bodyParser.urlencoded({ extended: false }));\n        this.app.use(bodyParser.json());\n        this.app.use(cookieParser());\n        this.app.disable('x-powered-by');\n        this.app.use(morgan('dev'));\n        this.app.use(function (req, res, next) {\n            req.startTimestamp = Date.now();\n            res.header('Access-Control-Allow-Origin', '*');\n            res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n            res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n            if ('OPTIONS' == req.method) res.status(200).send('OK');\n            else next();\n        });\n        this.httpServer = http.Server(this.app);\n        this.routersMap = {};\n    }\n\n    addRouter (name, pth) {\n        this.routersMap[name] = express.Router();\n        this.app.use(pth, this.routersMap[name]);\n    }\n\n    addRoute (routerName, routeData) {\n        // Statics handler\n        if (routeData.staticsPath) {\n            this.routersMap[routerName].use(\n                routeData.path, express.static(routeData.staticsPath)\n            );\n        }\n        // Regular handler\n        else {\n            this.routersMap[routerName][\n                routeData.method.toLowerCase()\n            ](routeData.path, routeData.handler);\n        }\n    }\n\n    startHTTPServer (httpPort) {\n        var deferred = q.defer();\n        this.httpServer.listen(httpPort, () => {\n            deferred.resolve();\n        });\n        return deferred.promise;\n    }\n    \n    start (httpPort) {\n        var deferred = q.defer();\n        this.startHTTPServer(httpPort).then(() => {\n            deferred.resolve({\n                http: httpPort\n            });\n        });\n        return deferred.promise;\n    }\n\n}"]}