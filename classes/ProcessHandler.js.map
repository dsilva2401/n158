{"version":3,"sources":["../src/resources/classes/ProcessHandler.js"],"names":["ProcessHandler","_settings","settings","_resolveSettingsParams","procVariablesMap","httpServersMap","_setupVars","key","value","match","procSettingsPath","path","resolve","procSettings","yaml","safeLoad","fs","readFileSync","JSON","parse","Error","Object","keys","vars","forEach","k","set","pipelineItemData","routeSettings","req","res","next","locals","skipWhenErrors","status","sType","Math","floor","procSelf","handler","processGet","get","processSet","params","data","fStatus","fData","send","end","name","serverSettings","server","ExpressServer","routers","routerData","addRouter","routes","routeData","pipeline","push","context","finish","handlerSetup","method","staticsPath","_resolveHandler","addRoute","VAR_CHAR","r","fValue","substring","length","Array","isArray","map","item","_resolveSettings","httpServers","httpServerData","_attachHTTPServer","credentials","_setupHTTPServers","Promise","all","serverName","buffServer","buffServerSettings","start","ports","http","https","then"],"mappings":"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","file":"ProcessHandler.js","sourcesContent":["import {ExpressServer} from './ExpressServer';\nimport yaml from 'js-yaml';\nimport path from 'path';\nimport fs from 'fs';\n\nexport class ProcessHandler {\n    \n    constructor (_settings) {\n        this.settings = this._resolveSettingsParams(_settings);\n        this.procVariablesMap = {};\n        this.httpServersMap = {};\n        this._setupVars();\n    }\n\n    set (key, value) {\n        this.procVariablesMap[key] = value;\n    }\n    \n    get (key) {\n        return this.procVariablesMap[key];\n    }\n\n    _resolveSettingsParams (settings) {\n        if (typeof settings == 'object') {\n            return settings;\n        }\n        if (typeof settings == 'string') {\n            if (settings.match(/.yaml$/)) {\n                var procSettingsPath = path.resolve(settings);\n                var procSettings = yaml.safeLoad(fs.readFileSync(procSettingsPath, 'utf-8'));\n                return procSettings;\n            }\n            if (settings.match(/.json$/)) {\n                var procSettingsPath = path.resolve(settings);\n                var procSettings = JSON.parse(fs.readFileSync(procSettingsPath, 'utf-8'));\n                return procSettings;\n            }\n            throw Error ('n158 => ProcessHandler: Invalid settings file path');\n            return;\n        }\n        throw Error ('n158 => ProcessHandler: Invalid settings param');\n        return;\n    }\n\n    _setupVars () {\n        Object.keys(this.settings.vars || {}).forEach((k) => {\n            this.set(k, this.settings.vars[k]);\n        });\n    }\n\n    _resolveHandler (pipelineItemData, routeSettings) {\n        return (req, res, next) => {\n            req.locals = req.locals || {};\n            if (pipelineItemData.skipWhenErrors && req.locals.status) {\n                var sType = Math.floor(req.locals.status / 100);\n                if ( sType == 4 || sType == 5 ) {\n                    next();\n                    return;\n                }\n            }\n            var procSelf = this;\n            pipelineItemData.handler({\n                processGet: (key) => { return procSelf.get(key); },\n                processSet: (key, value) => { return procSelf.set(key, value); },\n                params: pipelineItemData.params || {},\n                routeSettings: routeSettings,\n                req: req,\n                res: res,\n                set: (key, value) => { req.locals[key] = value },\n                get: (key) => { return req.locals[key] },\n            }, (status, data) => {\n                req.locals.status = status;\n                req.locals.data = data;\n                next();\n            }, (status, data) => {\n                var fStatus = status || req.locals.status || 200;\n                var fData = data || req.locals.data || {};\n                res.status(fStatus);\n                res.send(fData);\n                res.end();\n            });\n        }\n    }\n    \n    _attachHTTPServer (name, serverSettings) {\n        // Init server\n        var server = new ExpressServer();\n        this.httpServersMap[name] = {}\n        this.httpServersMap[name].settings = serverSettings;\n        this.httpServersMap[name].server = server;\n        // Setup routers\n        serverSettings.routers.forEach((routerData) => {\n            server.addRouter(routerData.name, routerData.path);\n            routerData.routes.forEach((routeData) => {\n                routeData.pipeline.push({\n                    handler: (context, next, finish) => {\n                        finish();\n                    }\n                });\n                routeData.pipeline.forEach((pipelineItemData) => {\n                    var handlerSetup = {\n                        method: routeData.method,\n                        path: routeData.path,\n                    }\n                    if (pipelineItemData.staticsPath) {\n                        handlerSetup.staticsPath = pipelineItemData.staticsPath;\n                    } else {\n                        handlerSetup.handler = this._resolveHandler(\n                            pipelineItemData,\n                            routeData\n                        )\n                    }\n                    server.addRoute(routerData.name, handlerSetup);\n                });\n            })\n        });\n    }\n\n    _resolveSettings (settings) {\n        var VAR_CHAR = '$';\n        var r = (value) => {\n            var fValue = value;\n            if (typeof value == 'string') {\n                if (value[0] == VAR_CHAR) {\n                    fValue = this.get(value.substring(1, value.length));\n                }\n            } else if (typeof value == 'object') {\n                if ( !Array.isArray(value) ) {\n                    Object.keys(value).forEach((k) => {\n                        value[k] = r(value[k]);\n                    });\n                } else {\n                    value = value.map((item) => {\n                        return r(item);\n                    });\n                }\n            }\n            return fValue;\n        }\n        return r(settings);\n    }\n\n    _setupHTTPServers () {\n        var settings = this._resolveSettings(this.settings);\n        settings.httpServers.forEach((httpServerData) => {\n            this._attachHTTPServer(httpServerData.name, httpServerData);\n        });\n    }\n\n    startHTTPServers (credentials) {\n        this._setupHTTPServers();\n        return Promise.all(\n            Object.keys(this.httpServersMap).map((serverName) => {\n                var buffServer = this.httpServersMap[serverName].server;\n                var buffServerSettings = this.httpServersMap[serverName].settings;\n                return new Promise((resolve) => {\n                    buffServer.start(buffServerSettings.ports.http, buffServerSettings.ports.https, credentials).then((ports) => {\n                        resolve({\n                            serverName: serverName,\n                            ports: ports\n                        });\n                    });\n                });\n            })\n        );\n    }\n\n    startDaemons () {}\n\n}"]}